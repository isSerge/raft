searchState.loadedDescShard("raft", 0, "A simple Raft implementation in Rust\nHelper to send a command message to a specific node\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe state of a node in the consensus protocol.\nCheck if the log is consistent with another log. Used by …\nGet the commit index.\nThe commit index of the node.\nGet the current term.\nThe current term of the node.\nDecides whether to grant vote based on RequestVote RPC …\nFinds conflicting entries, appends new entries. Returns …\nUpdate follower’s commit index based on the leader’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of the node.\nThe id of the node.\nInitialize leader state. Used when transitioning to leader.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the last applied index.\nThe last applied index of the node.\nAppend a new entry to the leader’s log.\nProcess the response from a follower after appending …\nRecalculate commit index. Used by Leader’s AppendEntries …\nGet the log.\nThe log of the node.\nGet the last index of the log (1-based).\nGet the last term of the log.\nThe match index of the node for each node. Used for Leader…\nThe next index of the node for each node. Used for Leader…\nGet the next index for a node.\nRecord a vote for self during candidate state.\nSet the last applied index.\nGet the state of the node.\nThe state of the node.\nTransition to a candidate and vote for self.\nTransition to a follower and reset votes.\nTransition to a leader.\nUpdate the term of the node and reset the vote if new_term …\nThe node that the node has voted for.\nGet the number of votes received by the node.\nThe number of votes received by the node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA new entry has been committed.\nA new leader has been elected.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA log entry in the Raft log.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApply committed log entries to the state machine.\nBroadcast a message to all other nodes.\nBroadcast a vote request to all other nodes.\nGet the commit index.\nThe core state of the node.\nGet the current term.\nThe event sender for the node.\nReturns the argument unchanged.\nHandle an AppendEntries request from a leader\nHandle an AppendResponse from a follower. Used by leaders …\nHandle a request vote from a candidate\nHandle a timer event (election or heartbeat timeout).\nHandle a vote response from a voter. Used by candidates to …\nGet the node’s ID.\nCalls <code>U::from(self)</code>.\nGet the last applied index.\nGet the log.\nGet the last log index.\nGet the last log term.\nThe messenger for the node.\nThe pending append entries for the node. Used to track the …\nReceives and processes a single message or timer event. …\nSend an AppendEntries to all followers. Returns Ok(()) if …\nSend an AppendEntries to a follower (used by Leader)\nSend an AppendResponse to a leader.\nSend a heartbeat to all other nodes. Used when received …\nSend a VoteResponse to a candidate.\nStart an AppendEntries Leader appends a new entry to its …\nStart an election. Used when received Election timer event …\nGet the node’s current state.\nThe state machine of the node.\nGet the state of the state machine.\nElection timer expired.\nHeartbeat timer expired.\nTimers for elections and heartbeats.\nThe type of timer that has expired.\nThe currently active timer and its type.\nCalculate the deadline for a timer based on its type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a random election timeout within the range of …\nReset the election timer, regardless of the current active …\nReset the heartbeat timer, regardless of the current …\nSet the active timer.\nWait for the currently active timer to expire and emit the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequest to append entries to other nodes\nResponse to append request\nA message in the network or a command to a node\nCommand to append a new entry to the log\nRequest vote from other nodes during election\nResponse to vote request\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA messaging system for a node\nBroadcasts a message to all <em>other</em> nodes using the global …\nReturns the argument unchanged.\nReturns the number of nodes in the network.\nReturns a slice of all peer IDs in the network.\nThe ID of the node.\nCalls <code>U::from(self)</code>.\nThe network of the node.\nSends a message directly into this node’s <em>own</em> queue …\nSends a message to a specific node using the global …\nSends a message intended for another node’s queue via …\nInternal helper - takes msg_arg and DOES NOT lock network\nThe sender for the node.\nA network of nodes\nAdd a node to the network\nReturns the argument unchanged.\nReturns all node IDs in the network.\nReturns the number of nodes in the network.\nCalls <code>U::from(self)</code>.\nRoutes a message from a sender node to a destination node…\nA receiver for messages from this node’s own queue.\nReturns the argument unchanged.\nThe ID of the node.\nCalls <code>U::from(self)</code>.\nReceives a message from this node’s own queue.\nThe receiver for the node.\nA trait for a state machine.\nApply a command to the state machine.\nReturns the argument unchanged.\nGet the state of the state machine.\nCalls <code>U::from(self)</code>.")